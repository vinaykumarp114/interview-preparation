Question 1: 
Packages for customers at an Amazon Fulfillment Center (Warehouse) are assigned unique integer identifiers (package IDs). The package IDs are stored in a balanced binary search tree. Find the package with the 5th smallest package ID.

Example Input and Output:

    input: head of balanced BST containing [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] output: 5
    input: head of balanced BST containing [10, 11, 31, 51, 71, 72] output: 71
    input: head of balanced BST containing [1, 2, 3] output: -1 

You can assume the node structure/class has the following format:

class PackageNode {
    PackageNode leftPackage;
    PackageNode rightPackage;
    int packageId;
}

You can assume the function's signature has the following structure:

int findFifthSmallestPackage(PackageNode rootPackageNode);

Your solution will be evaluated on correctness, runtime complexity (big-O), and adherence to coding best practices. Make sure to document your assumptions and the Big-O runtime and space complexity of the solution you implement. For this problem, the runtime complexity of your solution must be strictly less than O(n) for the average case. A solution that returns the correct answer but has an O(n) runtime complexity for the average case will be considered incorrect.

===========================================================================
Question 2: 
Imagine a map with an Amazon Fulfillment Center (Warehouse) located at the origin. We also have a set of customer locations denoted by x miles East/West, and y miles North/South of the Warehouse. As we work on Amazon PrimeAir, find the top k customer locations that are closest to the Warehouse, so we can test the flight capabilities of our autonomous drones.


Example Input and Output:

    input: {locations: [ {1,2}, {2,2}, {2,1} ], k: 2} output: [{1,2}, {2,1}] (The order the points are returned in does not matter.)
    input: {locations: [ {1,2}, {2,2}, {2,1}], k: 1} output: [{1,2}] or [{2,1}] (Either result is acceptable since they are equidistant to the {0,0}, the origin.)
    input: {locations: [ {9,0}, {1,2}, {5,6}, {2,2}, {1000,200}, {2,1} ], k: 3} output: [{1,2}, {2,2}, {2,1}] 

You can assume the Location structure/class has the following format:

class Location {
    int x;
    int y;
}

You can assume the function's signature has the following structure:

Location[] findClosestCustomerLocations(Location[] customerLocations, int k);

Your solution will be evaluated on correctness, runtime complexity (big-O), and adherence to coding best practices. Make sure to document your assumptions and the Big-O runtime and space complexity of the solution you implement. For this problem, the runtime complexity of your solution must be strictly less than O(n^2). A solution that returns the correct answer but has an O(n^2) runtime complexity will be considered incorrect. Using a sort function and sorting the list of points will also be considered incorrect. 
================================================================
Questions 3: 
You are the owner of a software company. A restaurant owner approaches you with a request to design an application for managing restaurant reservations. The restaurant has one location only, and takes reservations by phone. Reservations include name and phone of customer, date and time requested, and size of party. Reservations are confirmed on the spot if there is availability. Design an OO application for this reservation system. This is a design question, no coding required. Enumerate the classes you will build for such system. Express your answer in bullet points. For each class, describe its intent, and its relation to other classes in your design. You may add method signatures to the design if you think this will clarify the design more. Your design will be evaluated on OO design principles.

Answer
=====
1) Address - city, street, zipcode
2) Customer - Name, Phone, DateTime (Requested Date), Size (Total Party Size)
    Functions
      - Check in
      - pay bill
      - order
3) Restaurant - Address, Integer (Size of Party Hall), Boolean (Available)
       Location of Resturant (Address)
       Size of Party Hall (Integer)
       Available flag (Boolean)
4) Reservation - Customer, Restaurant, Integer(Reservation ID), DateTime (Reservation Time)
       Function 
         - CheckAvailablity : Verify whether restaurant is available for customer criteria
         - BookCustomer : IF restaurant is available then book customer


 